from aiogram import Router, F, types
from aiogram.filters import or_f, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from redis.asyncio.client import Redis

from utils import login, link

from app import bot

user_private_router = Router()


class Auth(StatesGroup):
    email = State()
    password = State()


@user_private_router.callback_query(or_f(
    F.data.startswith("auth")
))
async def auth(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ email –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Å–∞–π—Ç–∞:")
    await state.set_state(Auth.email)
    await callback_query.answer()


@user_private_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")


@user_private_router.message(Auth.email)
async def fix_email(message: types.Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await state.set_state(Auth.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —Å–∞–π—Ç–∞:")


@user_private_router.message(Auth.password)
async def fix_password(message: types.Message, state: FSMContext, redis: Redis):
    user_data = await state.get_data()
    user_data["password"] = message.text
    login_response = await login(user_data["email"], user_data["password"])
    token = login_response.get("access_token")
    if token:
        await redis.sadd(f"auth:{message.from_user.id}", token)
        link_response = await link(tg_id=message.from_user.id, email=str(user_data["email"]))
        import asyncio

        async def demo_messages():
            # –ü—Ä–∏–º–µ—Ä—ã –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            demo_data = {
                "new_task": {
                    "first_name": "–ò–≤–∞–Ω",
                    "task_name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    "task_description": "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "task_group_name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û",
                    "task_start_time": "2022-04-14T08:00:00",
                    "task_end_time": "2022-04-20T17:00:00",
                    "task_duration": "48"
                },
                "deadline_approaching": {
                    "first_name": "–ú–∞—Ä–∏—è",
                    "task_name": "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
                    "task_description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
                    "task_group_name": "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
                    "task_start_time": "2022-04-01T09:00:00",
                    "task_end_time": "2022-04-15T18:00:00",
                    "task_duration": "10"
                },
                "task_started_no_activity": {
                    "first_name": "–ê–ª–µ–∫—Å–µ–π",
                    "task_name": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                    "task_description": "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã",
                    "task_group_name": "QA",
                    "task_start_time": "2022-04-10T10:00:00",
                    "task_end_time": "2022-04-13T16:00:00",
                    "task_duration": "24"
                }
            }

            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            for task_type, data in demo_data.items():
                message = (
                    f"–ü—Ä–∏–≤–µ—Ç, {data['first_name']}! üåü\n\n"
                    f"–¢–µ–±–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n"
                    f"<b>{data['task_name']}</b>\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['task_description']}\n"
                    f"–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞—á–∏: {data['task_group_name']}\n"
                    f"–ù–∞—á–∞–ª–æ: {data['task_start_time']}\n"
                    f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {data['task_end_time']}\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['task_duration']} —á–∞—Å–æ–≤.\n"
                )
                await bot.send_message(chat_id=12345678, text=message,
                                       parse_mode="HTML")  # –ó–∞–º–µ–Ω–∏—Ç–µ 12345678 –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –≤ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        asyncio.run(demo_messages())

    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏/–∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    await state.clear()
